import { QueryInterface, DataTypes, Op } from "sequelize"
import { v4 } from "uuid"
import bcrypt from "bcrypt"
import generator from "generate-password"
// local imports
import * as helper from "../helper"
import * as config from "../../../config"
module.exports = {
    up: async (query: QueryInterface) => {
        const t = await query.sequelize.transaction()
        try {
            await query.startTransaction(t)
            // Create permission master table
            await query.createTable(
                {
                    tableName: "permission_master",
                },
                {
                    id: {
                        type: DataTypes.INTEGER,
                        primaryKey: true,
                        autoIncrement: true,
                        allowNull: false,
                    },
                    name: {
                        type: DataTypes.STRING(40),
                        allowNull: false,
                    },
                    description: {
                        type: DataTypes.STRING(200),
                        allowNull: true,
                    },
                    displayName: {
                        type: DataTypes.STRING(40),
                        allowNull: false,
                    },
                    group: {
                        type: DataTypes.STRING(30),
                        allowNull: false,
                    },
                    isActive: {
                        type: DataTypes.BOOLEAN,
                        defaultValue: true,
                        allowNull: false,
                    },
                    createdOn: {
                        type: DataTypes.DATE,
                    },
                    modifiedOn: {
                        type: DataTypes.DATE,
                    },
                },
                {
                    transaction: t,
                }
            )
            // Create role master table
            await query.createTable(
                {
                    tableName: "role_master",
                },
                {
                    id: {
                        type: DataTypes.INTEGER,
                        primaryKey: true,
                        autoIncrement: true,
                        allowNull: false,
                    },
                    name: {
                        type: DataTypes.STRING(40),
                        allowNull: false,
                    },
                    description: {
                        type: DataTypes.STRING(200),
                        allowNull: true,
                    },
                    is_system_generated: {
                        type: DataTypes.BOOLEAN,
                        allowNull: false,
                        defaultValue: false,
                    },
                    uuid: {
                        type: DataTypes.UUID,
                        defaultValue: DataTypes.UUIDV4,
                        allowNull: false,
                    },
                    isActive: {
                        type: DataTypes.BOOLEAN,
                        defaultValue: true,
                        allowNull: false,
                    },
                    createdOn: {
                        type: DataTypes.DATE,
                    },
                    modifiedOn: {
                        type: DataTypes.DATE,
                    },
                },
                {
                    transaction: t,
                }
            )
            // Create system generated roles - System administrator and User
            await query.bulkInsert(
                "role_master",
                [
                    {
                        id: 1,
                        name: "System Administrator",
                        description: "Super user role generated by the system",
                        uuid: v4(),
                        is_system_generated: true,
                        isActive: true,
                        createdOn: new Date(),
                        modifiedOn: new Date(),
                    },
                    {
                        id: 2,
                        name: "User",
                        description: "Normal user role generated by the system",
                        uuid: v4(),
                        is_system_generated: true,
                        isActive: true,
                        createdOn: new Date(),
                        modifiedOn: new Date(),
                    },
                    {
                        id: 3,
                        name: "Agent",
                        description: "Agent role generated by the system",
                        uuid: v4(),
                        is_system_generated: true,
                        isActive: true,
                        createdOn: new Date(),
                        modifiedOn: new Date(),
                    },
                ],
                { transaction: t }
            )
            // Create user master table
            await query.createTable(
                {
                    tableName: "user_master",
                },
                {
                    id: {
                        type: DataTypes.INTEGER,
                        primaryKey: true,
                        autoIncrement: true,
                        allowNull: false,
                    },
                    fullName: {
                        type: DataTypes.STRING(200),
                        allowNull: false,
                    },
                    birthDate: {
                        type: DataTypes.DATEONLY,
                        allowNull: true,
                    },
                    gender: {
                        type: DataTypes.ENUM,
                        values: helper.getGender(),
                        allowNull: true,
                    },
                    address: {
                        type: DataTypes.STRING(500),
                        allowNull: true,
                    },
                    state: {
                        type: DataTypes.STRING(45),
                        allowNull: true,
                    },
                    country: {
                        type: DataTypes.STRING(45),
                        allowNull: true,
                    },
                    pan_card: {
                        type: DataTypes.STRING(20),
                        allowNull: true,
                    },
                    profileImage: {
                        type: DataTypes.STRING(500),
                        allowNull: true,
                    },
                    uuid: {
                        type: DataTypes.UUID,
                        defaultValue: DataTypes.UUIDV4,
                        allowNull: false,
                    },
                    isActive: {
                        type: DataTypes.BOOLEAN,
                        defaultValue: true,
                        allowNull: false,
                    },
                    createdOn: {
                        type: DataTypes.DATE,
                    },
                    modifiedOn: {
                        type: DataTypes.DATE,
                    },
                },
                { transaction: t }
            )
            // Create user login table
            await query.createTable(
                {
                    tableName: "user_login",
                },
                {
                    id: {
                        type: DataTypes.INTEGER,
                        primaryKey: true,
                        autoIncrement: true,
                        allowNull: false,
                    },
                    userId: {
                        type: DataTypes.INTEGER,
                        references: {
                            model: "user_master",
                            key: "id",
                        },
                        allowNull: false,
                    },
                    roleId: {
                        type: DataTypes.INTEGER,
                        references: {
                            model: "role_master",
                            key: "id",
                        },
                        allowNull: false,
                    },
                    email: {
                        type: DataTypes.STRING(80),
                        allowNull: false,
                        unique: true,
                    },
                    passwordHash: {
                        type: DataTypes.STRING(200),
                        allowNull: false,
                    },
                    is_system_generated: {
                        type: DataTypes.BOOLEAN,
                        allowNull: false,
                        defaultValue: false,
                    },
                    resetToken: {
                        type: DataTypes.STRING(500),
                        allowNull: true,
                    },
                    resetExpires: {
                        type: DataTypes.DATE,
                        allowNull: true,
                    },
                    createdOn: {
                        type: DataTypes.DATE,
                    },
                    modifiedOn: {
                        type: DataTypes.DATE,
                    },
                    created_by: {
                        type: DataTypes.INTEGER,
                        allowNull: true,
                        references: {
                            model: "user_login",
                            key: "id",
                        },
                    },
                    modified_by: {
                        type: DataTypes.INTEGER,
                        allowNull: true,
                        references: {
                            model: "user_login",
                            key: "id",
                        },
                    },
                },
                {
                    transaction: t,
                }
            )
            // Add created_by and modified_by columns in role_master, user_master
            await query.addColumn(
                "role_master",
                "created_by",
                {
                    type: DataTypes.INTEGER,
                    allowNull: true,
                    references: {
                        model: "user_login",
                        key: "id",
                    },
                },
                { transaction: t }
            )
            await query.addColumn(
                "role_master",
                "modified_by",
                {
                    type: DataTypes.INTEGER,
                    allowNull: true,
                    references: {
                        model: "user_login",
                        key: "id",
                    },
                },
                { transaction: t }
            )
            await query.addColumn(
                "user_master",
                "created_by",
                {
                    type: DataTypes.INTEGER,
                    allowNull: true,
                    references: {
                        model: "user_login",
                        key: "id",
                    },
                },
                { transaction: t }
            )
            await query.addColumn(
                "user_master",
                "modified_by",
                {
                    type: DataTypes.INTEGER,
                    allowNull: true,
                    references: {
                        model: "user_login",
                        key: "id",
                    },
                },
                { transaction: t }
            )
            // Create role permission table
            await query.createTable(
                {
                    tableName: "role_permission",
                },
                {
                    id: {
                        type: DataTypes.INTEGER,
                        primaryKey: true,
                        autoIncrement: true,
                        allowNull: false,
                    },
                    roleId: {
                        type: DataTypes.INTEGER,
                        references: {
                            model: "role_master",
                            key: "id",
                        },
                        allowNull: false,
                    },
                    permissionId: {
                        type: DataTypes.INTEGER,
                        references: {
                            model: "permission_master",
                            key: "id",
                        },
                        allowNull: false,
                    },
                    createdOn: {
                        type: DataTypes.DATE,
                    },
                    modifiedOn: {
                        type: DataTypes.DATE,
                    },
                    created_by: {
                        type: DataTypes.INTEGER,
                        allowNull: true,
                        references: {
                            model: "user_login",
                            key: "id",
                        },
                    },
                    modified_by: {
                        type: DataTypes.INTEGER,
                        allowNull: true,
                        references: {
                            model: "user_login",
                            key: "id",
                        },
                    },
                },
                { transaction: t }
            )
            // Create system admin user
            await query.bulkInsert(
                "user_master",
                [
                    {
                        id: 1,
                        fullName: config.SysAdm.name,
                        uuid: v4(),
                        isActive: true,
                        createdOn: new Date(),
                        modifiedOn: new Date(),
                    },
                ],
                { transaction: t }
            )
            const generatedPassword = generator.generate({
                length: 20,
                lowercase: true,
                uppercase: true,
                numbers: true,
                strict: true,
                symbols: true,
            })
            console.log(`Please keep password safe: ` + generatedPassword)
            await query.bulkInsert(
                "user_login",
                [
                    {
                        id: 1,
                        userId: 1,
                        roleId: 1,
                        email: config.SysAdm.email,
                        passwordHash: bcrypt.hashSync(generatedPassword, 12),
                        createdOn: new Date(),
                        modifiedOn: new Date(),
                    },
                ],
                { transaction: t }
            )
            await query.commitTransaction(t)
        } catch (error) {
            await query.rollbackTransaction(t)
            console.log(error)
        }
    },
    down: async (query: QueryInterface) => {
        const t = await query.sequelize.transaction()
        try {
            await query.startTransaction(t)
            // Delete system admin user
            await query.bulkDelete(
                "user_login",
                {
                    id: {
                        [Op.eq]: 1,
                    },
                },
                { transaction: t }
            )
            await query.bulkDelete(
                "user_master",
                {
                    id: {
                        [Op.eq]: 1,
                    },
                },
                { transaction: t }
            )
            // Delete role permission table
            await query.dropTable("role_permission", { transaction: t })
            // Delete created_by and modified_by columns from role_master, user_master
            await query.removeColumn("user_master", "modified_by", {
                transaction: t,
            })
            await query.removeColumn("user_master", "created_by", {
                transaction: t,
            })
            await query.removeColumn("role_master", "modified_by", {
                transaction: t,
            })
            await query.removeColumn("role_master", "created_by", {
                transaction: t,
            })
            // Delete user login table
            await query.dropTable("user_login", { transaction: t })
            // Delete user master table
            await query.dropTable("user_master", { transaction: t })
            // Delete system generated roles - System administrator and User
            await query.bulkDelete(
                "role_master",
                {
                    id: {
                        [Op.between]: [1, 3],
                    },
                },
                { transaction: t }
            )
            // Delete role master table
            await query.dropTable("role_master", { transaction: t })
            // Delete permission master table
            await query.dropTable("permission_master", { transaction: t })
            await query.commitTransaction(t)
        } catch (error) {
            await query.rollbackTransaction(t)
            console.log(error)
        }
    },
}
